# Application Information
# ~~~~~

application.name = Axelor application
application.description = Axelor Demo application
application.version = 1.0.0
application.author = Axelor
application.copyright = Copyright (c) {year} Axelor. All Rights Reserved.

# Header logo. Should be 40px in height with transparent background.
application.logo = img/axelor-logo.png

# Home website. Link to be used with header logo.
application.home = https://www.axelor.com

# Online help. Link to be used in About page.
application.help = https://docs.axelor.com

# Application deployment mode. Can be `prod` or `dev`
application.mode = dev

# CSS theme
# application.theme =

# Default Locale (en, fr, fr_FR, en_US)
# application.locale =

# Base url of the application.
# application.base-url =

# Enable multi-tenancy
# application.multi-tenancy = false

# `if-feature` custom class
# application.config-provider = com.axelor.app.MyAppConfig

# Pattern to validate domain expressions
# application.domain-blocklist-pattern = (\\(\\s*(SELECT|DELETE|UPDATE)\\s+)|query_to_xml|some_another_function

# Groovy scripts cache size
# application.script.cache.size = 1000

# Groovy scripts cache entry expire time (in minutes)
# application.script.cache.expire-time = 20

# whether to not check action permissions
# application.permission.disable-action = false

# whether to not check relational fields permissions
# application.permission.disable-relational-field = false

# View configuration
# ~~~~~

# Whether to use single tab layout
# view.single-tab = false

# Define the maximum opened tabs allowed
# view.max-tabs = 10

# Menu style (left, top, both)
view.menubar.location = both

# Whether to show button titles in toolbar
# view.toolbar.show-titles = false

# Whether show confirm dialog with yes/no buttons (else is Cancel/OK)
# view.confirm-yes-no = false

# If `checkbox`, grid widgets will have checkbox selection enabled
# view.grid.selection =

# Whether to show  confirm/cancel buttons from grid row editor
# view.grid.editor-buttons =

# Whether to disable views customization
view.allow-customization = true

# Whether to disable advance search sharing
# view.adv-search.share = false

# Whether to disable export full option in advance search
# view.adv-search.export-full = false

# Session configuration
# ~~~~~

# Session timeout (in minutes)
session.timeout = 60

# Define session cookie as secure
# session.cookie.secure = true

# Reports
# ~~~~~

# External directory for birt report designs
# reports.design-dir = {user.home}/.axelor/reports

# Custom fonts config path for birt report designs
# reports.fonts-config = /path/to/custom-font-config.xml

# Template
# ~~~~~

# Template storage path for groovy template
# template.search-dir = {user.home}/.axelor/templates

# Encryption
# ~~~~~

# Encryption password
#encryption.password = MySuperSecretKey

# Encryption algorithm (CBC or GCM)
#encryption.algorithm = CBC

# Old Encryption password
#encryption.old-password = MySuperSecretKey

# Old Encryption algorithm (CBC or GCM)
#encryption.old-algorithm = CBC

# Database settings
# ~~~~~

# PostgreSQL
db.default.ddl = update
db.default.url = jdbc:postgresql://localhost:5432/axelor-demo
db.default.user = axelor
db.default.password = ****

# MySQL
#db.default.ddl = update
#db.default.url = jdbc:mysql://localhost:3306/axelor_demo_dev
#db.default.user = axelor
#db.default.password =

# Oracle
#db.default.ddl = update
#db.default.url = jdbc:oracle:thin:@localhost:1521:oracle
#db.default.user = axelor
#db.default.password =

# Shared cache mode settings (ALL, DISABLE_SELECTIVE, ENABLE_SELECTIVE, NONE)
javax.persistence.sharedCache.mode = ENABLE_SELECTIVE

# Hibernate full-text search
# hibernate.search.default.directory_provider = none
# hibernate.search.default.indexBase = {java.io.tmpdir}/axelor

# HikariCP connection pool
#hibernate.hikari.minimumIdle = 5
#hibernate.hikari.maximumPoolSize = 20
#hibernate.hikari.idleTimeout = 300000

# Data
# ~~~~~

# Storage path for upload files
data.upload.dir = {user.home}/.axelor/attachments

# maximum upload size (in MB)
data.upload.max-size = 5

# Upload filename pattern
#data.upload.filename-pattern = {year}-{month}/{day}/{name}

# Allowlist file name pattern, only matching files will be allowed
#data.upload.allowlist.pattern = \\.(xml|html|jpg|png|pdf|xsl)$

# Blocklist file name pattern, matching files will be rejected
#data.upload.blocklist.pattern = \\.(svg)$

# Whitelist content type can be used to allow file upload with matching content.
#data.upload.allowlist.types = image/*,video/webm

# Blacklist content type can be used to block file upload with matching content.
#data.upload.blocklist.types = image/*,video/webm

# Data export encoding
data.export.encoding = UTF-8

# Storage path for export action
# data.export.dir = {user.home}/.axelor/data-export

# Maximum number of records to export, -1 means unlimited
#data.export.max-size = 5000

# Export fetch size
#data.export.fetch-size = 1000

# default export separator
#data.export.separator = ,

# define a fixed locale for all exports
# data.export.locale =

# Whether to import demo data for the application
data.import.demo-data = true

# CORS
# ~~~~~

# Comma-separated list of origins to allow
#cors.allow-origin = *

# whether credentials are supported
#cors.allow-credentials = true

# Comma-separated list of methods to allow
#cors.allow-methods = GET,PUT,POST,DELETE,HEAD,OPTIONS

# Comma-separated list of headers to allow in a request
#cors.allow-headers = Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers

# how long the response from a pre-flight request can be cached by clients
# cors.max-age =

# Quartz Scheduler

# Whether to enable quartz scheduler
# quartz.enable = true

# Total number of threads in quartz thread pool
# quartz.thread-count = 3

# LDAP Configuration
# ~~~~~
#ldap.server.url = ldap://localhost:10389

# can be "simple" or "CRAM-MD5"
ldap.auth.type = simple

ldap.system.user = uid=admin,ou=system
ldap.system.password = secret

# group search base
ldap.group.base = ou=groups,dc=example,dc=com

# if set, create groups on ldap server under ldap.group.base
#ldap.group.object.class = groupOfUniqueNames

# a template to search groups by user login id
ldap.group.filter = (uniqueMember=uid={0})

# user search base
ldap.user.base = ou=users,dc=example,dc=com

# a template to search user by user login id
ldap.user.filter = (uid={0})

# CAS configuration
# ~~~~~
#auth.cas.server.url.prefix = https://localhost:8443/cas

# use public accessible url
#auth.cas.service = http://localhost:8080/open-platform-demo/cas

# login url, if not given prepared from server & service url
#auth.cas.login.url = https://localhost:8443/cas/login?service=http://localhost:8080/open-platform-demo/cas

# logout url, if not given prepared from server & service url
#auth.cas.logout.url = https://localhost:8443/cas/logout?service=http://localhost:8080/open-platform-demo/

# CAS validation protocol (CAS, SAML)
#auth.cas.protocol = SAML

# the attribute to map to user display name
#auth.cas.attrs.user.name = name

# the attribute to map to user email
#auth.cas.attrs.user.email = mail


# Mail
# ~~~~~

# smtp server host
#mail.smtp.host = smtp.gmail.com

# smtp server port
#mail.smtp.port = 587

# smtp encryption channel (starttls or ssl)
#mail.smtp.channel = starttls

# smtp username
#mail.smtp.user = user@gmail.com

# smtp password
#mail.smtp.password = secret

# imap socket read timeout
#mail.smtp.timeout = 60000

# imap socket connection timeout
#mail.smtp.connection-timeout = 60000

# imap server host
#mail.imap.host = imap.gmail.com

# imap server port
#mail.imap.port = 993

# imap encryption channel (starttls or ssl)
#mail.imap.channel = ssl

# imap username
#mail.imap.user = user@gmail.com

# imap password
#mail.imap.password = secret

# imap socket read timeout
#mail.imap.timeout = 60000

# imap socket connection timeout
#mail.imap.connection-timeout = 60000

# Logging
# ~~~~~

# Custom logback configuration
#logging.config = /path/to/logback.xml

# Storage path of logs files
#logging.path = {user.home}/.axelor/logs

# Format of file log message
#logging.pattern.file = %d{yyyy-MM-dd HH:mm:ss.SSS} %5p ${PID:- } --- [%t] %-40.40logger{39} : %m%n

# Format of console log message
#logging.pattern.console = %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(%5p) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n

# Global logging
logging.level.root = ERROR

# Axelor logging

# Log everything.
logging.level.com.axelor = INFO

# Hibernate logging

# Log everything. Good for troubleshooting
#logging.level.org.hibernate = INFO

# Log all SQL DML statements as they are executed
#logging.level.org.hibernate.SQL = DEBUG
#logging.level.org.hibernate.engine.jdbc = DEBUG

# Log all SQL DDL statements as they are executed
#logging.level.org.hibernate.tool.hbm2ddl = INFO

# Log all JDBC parameters
#logging.level.org.hibernate.type = ALL

# Log transactions
#logging.level.org.hibernate.transaction = DEBUG

# Log L2-Cache
#logging.level.org.hibernate.cache = DEBUG

# Log JDBC resource acquisition
#logging.level.org.hibernate.jdbc = TRACE
#logging.level.org.hibernate.service.jdbc = TRACE

# Log connection pooling
#logging.level.com.zaxxer.hikari = INFO
